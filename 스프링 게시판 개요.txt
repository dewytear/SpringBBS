[스프링 게시판 개요] : 게시판 프로젝트 구성

 ## 패키지 : bbsCommand, bbsController, bbsDAO, bbsVO

	* bbsCommand 패키지 구성 : 커맨드 객체의 구성
	
	 - Bcommand.java : 인터페이스
	 
		public interface Bcommand {
			void service(Model model);
		}
	
	 - ListCommand.java : 게시판의 리스트를 DB로부터 가져오는 객체
	 
		public class ListCommand implements Bcommand {
			@Override
			public void service(Model model) {
				Bdao dao = new Bdao();
				ArrayList<Bvo> bVOs = dao.list();
				model.addAttribute("list", bVOs);
			}
		}
		
	 - WriteCommand.java : 글 등록 처리
		
		public class writeCommand implements Bcommand {
			@Override
			public void service(Model model) {
				Map<String, Object> map = model.asMap();
				HttpServletRequest request = (HttpServletRequest)map.get("request");
				String bNM_BBS = request.getParameter("bNM_BBS");
				String bSUBJECT = request.getParameter("bSUBJECT");
				String bCONTENT = request.getParameter("bCONTENT");
				Bdao dao = new Bdao();
				dao.write(bNM_BBS, bSUBJECT, bCONTENT);
			}
		}
		
	 - ContentCommand.java : 내용보기 처리
	 
		public class ContentCommand implements Bcommand {
			@Override
			public void service(Model model) {
				Map<String, Object> map = model.asMap();
				HttpServletRequest request = (HttpServletRequest)map.get("request");
				String bNO_BBS = request.getParameter("bNO_BBS");
				Bdao dao = new Bdao();
				Bvo bVO = dao.contentView(bNO_BBS);
				model.addAttribute("contentView", bVO);
			}
		}
		
	 - ModifyCommand.java : 글 수정 처리(contentView.jsp 에서 수정한 내용을 DB에 등록)
	 
		public class ModifyCommand implements Bcommand {
			@Override
			public void service(Model model) {
				Map<String, Object> map = model.asMap();
				HttpServletRequest request = (HttpServletRequest)map.get("request");
				String bNO_BBS = request.getParameter("bNO_BBS");
				String bNM_BBS = request.getParameter("bNM_BBS");
				String bSUBJECT = request.getParameter("bSUBJECT");
				String bCONTENT = request.getParameter("bCONTENT");
				Bdao dao = new Bdao();
				dao.modify(bNO_BBS, bNM_BBS, bSUBJECT, bCONTENT);
			}
		}
	
	 - DeleteCommand.java : 글 삭제 처리
	 
		public class DeleteCommand implements Bcommand {
			@Override
			public void service(Model model) {
				Map<String, Object> map = model.asMap();
				HttpServletRequest request = (HttpServletRequest)map.get("request");
				String bNO_BBS = request.getParameter("bNO_BBS");
				Bdao dao = new Bdao();
				dao.delete(bNO_BBS);
			}
		}
	 
	 - ReplyFormCommand.java : 답글 내용 보기
	 
		public class ReplyFormCommand implements Bcommand {
			@Override
			public void service(Model model) {
				Map<String, Object> map = model.asMap();
				HttpServletRequest request = (HttpServletRequest)map.get("request");
				String bNO_BBS = request.getParameter("bNO_BBS");
				Bdao dao = new Bdao();
				Bvo bVO = dao.replyForm(bNO_BBS);
				model.addAttribute("replyForm", bVO);
			}
		}
	 
	 - ReplyCommand.java : 답글 처리
		public class ReplyCommand implements Bcommand {
			@Override
			public void service(Model model) {
				Map<String, Object> map = model.asMap();
				HttpServletRequest request = (HttpServletRequest)map.get("request");
				String bNO_BBS = request.getParameter("bNO_BBS");
				String bNM_BBS = request.getParameter("bNM_BBS");
				String bSUBJECT = request.getParameter("bSUBJECT");
				String bCONTENT = request.getParameter("bCONTENT");
				String bGROUP = request.getParameter("bGROUP");
				String bSTEP = request.getParameter("bSTEP");
				String bINDENT = request.getParameter("bINDENT");
				Bdao dao = new Bdao();
				dao.replyOk(bNO_BBS, bNM_BBS, bSUBJECT, bCONTENT, bGROUP, bSTEP, bINDENT);
			}
		}
	 
	* bbsController 패키지 구성
	
	 - Bcontroller.java
	 
	 
	* bbsDAO 패키지 구성
	
	 - Bdao.java
	 
	 
	* bbsVO 패키지 구성
	
	 - Bvo.java
	 
	 
 ## 뷰
 
	list.jsp : 게시판 리스트
	writeForm.jsp : 글쓰기 폼 페이지
	contentView.jsp : 내용보기/수정/삭제 폼 페이지
	replyForm.jsp : 답글쓰기 폼 페이지
	

----------------------------------------------------------------------------------	
[스프링 JDBC를 위한 템플릿]
 . 기능: Connection을 구하고, try-catch-finally로 자원을 관리하는 등의 중복된 코드를 제거
 . JDBC를 위한 3가지 템플릿 클래스
 
 	1) JdbcTemplate
 		: 스프링의 가장 기본적인 템플릿 색인된 파라미터(indexed parameter) 기반의 쿼리를 통해
 		 테이터베이스에 액세스하는 기능을 제공
 					  
 	2) NamedParameterJdbcTemplate
 		: SQL과 값들을 색인된 파라미터 대신 명명된 파라미터(named parameter)로
 		 바인딩하여 쿼리를 수행할 수 있게 해주는 JDBC 템플릿 클래스
 		 
 	3) SimpleJdbcTemplate
		: JAVA5부터 지원하는 기능중에 오토박싱, 제네릭스, 가변 파라미터 목록등을 활용해서
		 쉽게 템플릿을 사용할 수 있도록 하는 템플릿 클래스 (3.1 에서는 삭제 되었음)
		 
 . JAVA 1.4 이하의 버전에서는 JDBC를 위한 템플릿을 사용할 수 없음.


[jdbcTemplate 사용방법]

# pom.xml에서 라이브러리를 불러온다. : org.springframework.spring-jdbc 설정

	<dependency>
	   <groupId>org.springframework</groupId>
	   <artifactId>spring-jdbc</artifactId>
	   <version>${org.springframework-version}</version>
	</dependency>

# DataSource 설정(Servlet-context.xml)

	<beans:bean name="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<beans:property name="driverClassName" value="oracle.jdbc.driver.OracleDriver"/>
		<beans:property name="url" value="jdbc:oracle:thin:@localhost:1521:dewydb"/>
		<beans:property name="username" value="scott"/>
	    <beans:property name="password" value="tiger"/>
	</beans:bean>

# JdbcTemplate 설정(Servlet-context.xml)

	<beans:bean name="template" class="org.springframework.jdbc.core.JdbcTemplate">
		<beans:property name="dataSource" ref="dataSource"/>
	</beans:bean>

